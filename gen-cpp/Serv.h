/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Serv_H
#define Serv_H

#include <thrift/TDispatchProcessor.h>
#include "student_types.h"



class ServIf {
 public:
  virtual ~ServIf() {}
  virtual void add(const Student& s) = 0;
  virtual void get(Student& _return) = 0;
};

class ServIfFactory {
 public:
  typedef ServIf Handler;

  virtual ~ServIfFactory() {}

  virtual ServIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServIf* /* handler */) = 0;
};

class ServIfSingletonFactory : virtual public ServIfFactory {
 public:
  ServIfSingletonFactory(const boost::shared_ptr<ServIf>& iface) : iface_(iface) {}
  virtual ~ServIfSingletonFactory() {}

  virtual ServIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServIf* /* handler */) {}

 protected:
  boost::shared_ptr<ServIf> iface_;
};

class ServNull : virtual public ServIf {
 public:
  virtual ~ServNull() {}
  void add(const Student& /* s */) {
    return;
  }
  void get(Student& /* _return */) {
    return;
  }
};

typedef struct _Serv_add_args__isset {
  _Serv_add_args__isset() : s(false) {}
  bool s :1;
} _Serv_add_args__isset;

class Serv_add_args {
 public:

  static const char* ascii_fingerprint; // = "53EC5CD0E78ECA3116F0689F68B4B4C2";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0xEC,0x5C,0xD0,0xE7,0x8E,0xCA,0x31,0x16,0xF0,0x68,0x9F,0x68,0xB4,0xB4,0xC2};

  Serv_add_args(const Serv_add_args&);
  Serv_add_args& operator=(const Serv_add_args&);
  Serv_add_args() {
  }

  virtual ~Serv_add_args() throw();
  Student s;

  _Serv_add_args__isset __isset;

  void __set_s(const Student& val);

  bool operator == (const Serv_add_args & rhs) const
  {
    if (!(s == rhs.s))
      return false;
    return true;
  }
  bool operator != (const Serv_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Serv_add_args& obj);
};


class Serv_add_pargs {
 public:

  static const char* ascii_fingerprint; // = "53EC5CD0E78ECA3116F0689F68B4B4C2";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0xEC,0x5C,0xD0,0xE7,0x8E,0xCA,0x31,0x16,0xF0,0x68,0x9F,0x68,0xB4,0xB4,0xC2};


  virtual ~Serv_add_pargs() throw();
  const Student* s;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Serv_add_pargs& obj);
};


class Serv_add_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Serv_add_result(const Serv_add_result&);
  Serv_add_result& operator=(const Serv_add_result&);
  Serv_add_result() {
  }

  virtual ~Serv_add_result() throw();

  bool operator == (const Serv_add_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Serv_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Serv_add_result& obj);
};


class Serv_add_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Serv_add_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Serv_add_presult& obj);
};


class Serv_get_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Serv_get_args(const Serv_get_args&);
  Serv_get_args& operator=(const Serv_get_args&);
  Serv_get_args() {
  }

  virtual ~Serv_get_args() throw();

  bool operator == (const Serv_get_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Serv_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Serv_get_args& obj);
};


class Serv_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Serv_get_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Serv_get_pargs& obj);
};

typedef struct _Serv_get_result__isset {
  _Serv_get_result__isset() : success(false) {}
  bool success :1;
} _Serv_get_result__isset;

class Serv_get_result {
 public:

  static const char* ascii_fingerprint; // = "DF9D66AE7D61C389117459A61487A2A2";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x9D,0x66,0xAE,0x7D,0x61,0xC3,0x89,0x11,0x74,0x59,0xA6,0x14,0x87,0xA2,0xA2};

  Serv_get_result(const Serv_get_result&);
  Serv_get_result& operator=(const Serv_get_result&);
  Serv_get_result() {
  }

  virtual ~Serv_get_result() throw();
  Student success;

  _Serv_get_result__isset __isset;

  void __set_success(const Student& val);

  bool operator == (const Serv_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Serv_get_result& obj);
};

typedef struct _Serv_get_presult__isset {
  _Serv_get_presult__isset() : success(false) {}
  bool success :1;
} _Serv_get_presult__isset;

class Serv_get_presult {
 public:

  static const char* ascii_fingerprint; // = "DF9D66AE7D61C389117459A61487A2A2";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x9D,0x66,0xAE,0x7D,0x61,0xC3,0x89,0x11,0x74,0x59,0xA6,0x14,0x87,0xA2,0xA2};


  virtual ~Serv_get_presult() throw();
  Student* success;

  _Serv_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Serv_get_presult& obj);
};

class ServClient : virtual public ServIf {
 public:
  ServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add(const Student& s);
  void send_add(const Student& s);
  void recv_add();
  void get(Student& _return);
  void send_get();
  void recv_get(Student& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ServIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServProcessor(boost::shared_ptr<ServIf> iface) :
    iface_(iface) {
    processMap_["add"] = &ServProcessor::process_add;
    processMap_["get"] = &ServProcessor::process_get;
  }

  virtual ~ServProcessor() {}
};

class ServProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServProcessorFactory(const ::boost::shared_ptr< ServIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ServIfFactory > handlerFactory_;
};

class ServMultiface : virtual public ServIf {
 public:
  ServMultiface(std::vector<boost::shared_ptr<ServIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ServIf> > ifaces_;
  ServMultiface() {}
  void add(boost::shared_ptr<ServIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add(const Student& s) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(s);
    }
    ifaces_[i]->add(s);
  }

  void get(Student& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return);
    }
    ifaces_[i]->get(_return);
    return;
  }

};



#endif
